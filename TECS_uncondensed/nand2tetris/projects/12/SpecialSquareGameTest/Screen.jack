// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.

   Implementation by Mark.
 */
class Screen {
	static Array screen;
	static Array bit;
	static int color;

    /** Initializes the Screen. */
    function void init() {
    	var int i, b;
    	let screen = 16384;
    	let color = -1;
    	let bit = Array.new(16);
    	let i = 0;
    	let b = 1;
    	while (i < 16) {
    		let bit[i] = b;
    		let i = i+1;
    		let b = b+b;
    	}
    	return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
    	var int i;
    	let i = 0;
    	while (i < 8192) {
    		let screen[i] = 0;	// white
    		let i = i+1;
    	}
    	return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
    	if (b) {			// MUST be 0 or -1
    		let color = -1;
    	} else {
    		let color = 0;
    	}
    	return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
    	var int b;
    	let b = bit[x&15];
    	let y = y*32+(x/16);
    	if ((y > -1) & (y < 8192)) {
			if (color) {
				let screen[y] = screen[y] | b;
			} else {
				let screen[y] = screen[y] & ~b;
			}
    	}
		return;
    }

    /** Draws a line from pixel (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int t, dx, dy, a, b;
		var bool negY;
		
		if (x1 = x2) {
	    	if (y1 > y2) {
				let t=y1; let y1=y2; let y2=t;
    		}
			do Screen._drawVerticalLine(x1, y1, y2);
			return;
		}
		if (x1 > x2) {
			// swap points
			let t=x1; let x1=x2; let x2=t;
			let t=y1; let y1=y2; let y2=t;
		}
		if (y1 = y2) {
			// ASSERT:  x1 <= y1
			do Screen._drawHorizontalLine(x1, x2, y1);
			return;
		}

		let dy = y2-y1;
		let negY = (dy < 0);
		if (negY) {
			let dy = -dy;
			}
		let dx = x2-x1;

		let a = 0;
		let b = 0;
		let t = 0;
		while (~(a>dx) & ~(b>dy)) {
			if (negY) {
				do Screen.drawPixel(x1+a, y1-b);
			} else {
				do Screen.drawPixel(x1+a, y1+b);
			}
			if (t < 0) {
				let a = a+1;
				let t = t+dy;
			} else {
				let b = b+1;
				let t = t-dx;
			}
		}
    	return;
    }


    /** Internal function to draw a vertical line from
     *  pixel (x, y1) to (x, y2).
     *
     *  REQUIRES y1 <= y2
     */
    function void _drawVerticalLine(int x, int y1, int y2) {
    	while (~(y1 > y2)) {
    		do Screen.drawPixel(x, y1);
    		let y1 = y1+1;
    	}
    	return;
    }

    /** Internal function to draw a horizontal line from
     *  pixel (x1, y) to (x2, y).
     *
     *  REQUIRES x1 <= x2
     */
    function void _drawHorizontalLine(int x1, int x2, int y) {
    	var int w1, w2, bm1, bm2;
    	
    	let w1 = y*32+(x1/16);
    	let w2 = y*32+(x2/16);
    	let bm1 = ~(bit[x1&15]-1);	// MSBs set including selected bit
    	let bm2 = bit[x2&15]*2-1;	// LSBs set including selected bit
    	if (w1 = w2) {
    		let bm1 = bm1&bm2;
    	}

		if (color) {
			let screen[w1] = screen[w1] | bm1;
		} else {
			let screen[w1] = screen[w1] & ~bm1;
		}
		if (w1 = w2) {
			return;
		}
		
		let w1 = w1+1;
		while (w1 < w2) {
			let screen[w1] = color;
			let w1 = w1+1;
		}

		if (color) {
			let screen[w2] = screen[w2] | bm2;
		} else {
			let screen[w2] = screen[w2] & ~bm2;
		}
		
		return;
    }


    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    	while (~(y1 > y2)) {
    		do Screen._drawHorizontalLine(x1, x2, y1);
    		let y1 = y1+1;
    	}
    	return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
		var int dx, dy, r2;
		if ((r < 0) | (r > 181)) {
			return;
		}
		let r2 = r*r;
		do Screen._drawHorizontalLine (cx-r, cx+r, cy);		
		let dy = 1;
		while (dy < r) {
			let dx = Math.sqrt(r2-(dy*dy));
//do Output.printInt(dx); do Output.printChar(20);
			do Screen._drawHorizontalLine (cx-dx, cx+dx, cy-dy);		
			do Screen._drawHorizontalLine (cx-dx, cx+dx, cy+dy);		
			let dy = dy+1;
		}
		do Screen.drawPixel (cx, cy-r);		
		do Screen.drawPixel (cx, cy+r);		
    	
    	return;    	
    }
}
