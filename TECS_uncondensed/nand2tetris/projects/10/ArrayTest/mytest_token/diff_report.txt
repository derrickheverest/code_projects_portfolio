<tokens>							<tokens>								
<keyword> class </keyword>					<keyword> class </keyword>								
<identifier> Main </identifier>					<identifier> Main </identifier>								
<symbol> { </symbol>						<symbol> { </symbol>								
<keyword> function </keyword>					<keyword> function </keyword>								
<keyword> void </keyword>					<keyword> void </keyword>								
<identifier> main </identifier>					<identifier> main </identifier>								
<symbol> ( </symbol>						<symbol> ( </symbol>								
<symbol> ) </symbol>						<symbol> ) </symbol>								
<symbol> { </symbol>						<symbol> { </symbol>								
<keyword> var </keyword>					<keyword> var </keyword>								
<identifier> Array </identifier>				<identifier> Array </identifier>								
<identifier> a </identifier>					<identifier> a </identifier>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<keyword> var </keyword>					<keyword> var </keyword>								
<keyword> int </keyword>					<keyword> int </keyword>								
<identifier> length </identifier>				<identifier> length </identifier>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<keyword> var </keyword>					<keyword> var </keyword>								
<keyword> int </keyword>					<keyword> int </keyword>								
<identifier> i </identifier>					<identifier> i </identifier>								
<symbol> , </symbol>						<symbol> , </symbol>								
<identifier> sum </identifier>					<identifier> sum </identifier>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<keyword> let </keyword>					<keyword> let </keyword>								
<identifier> length </identifier>				<identifier> length </identifier>								
<symbol> = </symbol>						<symbol> = </symbol>								
<identifier> Keyboard </identifier>				<identifier> Keyboard </identifier>								
<symbol> . </symbol>						<symbol> . </symbol>								
<identifier> readInt </identifier>				<identifier> readInt </identifier>								
<symbol> ( </symbol>						<symbol> ( </symbol>								
<stringConstant> HOW MANY NUMBERS?  </stringConstant>		<stringConstant> HOW MANY NUMBERS?  </stringConstant>								
<symbol> ) </symbol>						<symbol> ) </symbol>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<keyword> let </keyword>					<keyword> let </keyword>								
<identifier> a </identifier>					<identifier> a </identifier>								
<symbol> = </symbol>						<symbol> = </symbol>								
<identifier> Array </identifier>				<identifier> Array </identifier>								
<symbol> . </symbol>						<symbol> . </symbol>								
<identifier> new </identifier>					<identifier> new </identifier>								
<symbol> ( </symbol>						<symbol> ( </symbol>								
<identifier> length </identifier>				<identifier> length </identifier>								
<symbol> ) </symbol>						<symbol> ) </symbol>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<keyword> let </keyword>					<keyword> let </keyword>								
<identifier> i </identifier>					<identifier> i </identifier>								
<symbol> = </symbol>						<symbol> = </symbol>								
<integerConstant> 0 </integerConstant>				<integerConstant> 0 </integerConstant>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<keyword> while </keyword>					<keyword> while </keyword>								
<symbol> ( </symbol>						<symbol> ( </symbol>								
<identifier> i </identifier>					<identifier> i </identifier>								
<symbol> &lt; </symbol>						<symbol> &lt; </symbol>								
<identifier> length </identifier>				<identifier> length </identifier>								
<symbol> ) </symbol>						<symbol> ) </symbol>								
<symbol> { </symbol>						<symbol> { </symbol>								
<keyword> let </keyword>					<keyword> let </keyword>								
<identifier> a </identifier>					<identifier> a </identifier>								
<symbol> [ </symbol>						<symbol> [ </symbol>								
<identifier> i </identifier>					<identifier> i </identifier>								
<symbol> ] </symbol>						<symbol> ] </symbol>								
<symbol> = </symbol>						<symbol> = </symbol>								
<identifier> Keyboard </identifier>				<identifier> Keyboard </identifier>								
<symbol> . </symbol>						<symbol> . </symbol>								
<identifier> readInt </identifier>				<identifier> readInt </identifier>								
<symbol> ( </symbol>						<symbol> ( </symbol>								
<stringConstant> ENTER THE NEXT NUMBER:  </stringConstant>	<stringConstant> ENTER THE NEXT NUMBER:  </stringConstant>								
<symbol> ) </symbol>						<symbol> ) </symbol>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<keyword> let </keyword>					<keyword> let </keyword>								
<identifier> i </identifier>					<identifier> i </identifier>								
<symbol> = </symbol>						<symbol> = </symbol>								
<identifier> i </identifier>					<identifier> i </identifier>								
<symbol> + </symbol>						<symbol> + </symbol>								
<integerConstant> 1 </integerConstant>				<integerConstant> 1 </integerConstant>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<symbol> } </symbol>						<symbol> } </symbol>								
<keyword> let </keyword>					<keyword> let </keyword>								
<identifier> i </identifier>					<identifier> i </identifier>								
<symbol> = </symbol>						<symbol> = </symbol>								
<integerConstant> 0 </integerConstant>				<integerConstant> 0 </integerConstant>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<keyword> let </keyword>					<keyword> let </keyword>								
<identifier> sum </identifier>					<identifier> sum </identifier>								
<symbol> = </symbol>						<symbol> = </symbol>								
<integerConstant> 0 </integerConstant>				<integerConstant> 0 </integerConstant>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<keyword> while </keyword>					<keyword> while </keyword>								
<symbol> ( </symbol>						<symbol> ( </symbol>								
<identifier> i </identifier>					<identifier> i </identifier>								
<symbol> &lt; </symbol>						<symbol> &lt; </symbol>								
<identifier> length </identifier>				<identifier> length </identifier>								
<symbol> ) </symbol>						<symbol> ) </symbol>								
<symbol> { </symbol>						<symbol> { </symbol>								
<keyword> let </keyword>					<keyword> let </keyword>								
<identifier> sum </identifier>					<identifier> sum </identifier>								
<symbol> = </symbol>						<symbol> = </symbol>								
<identifier> sum </identifier>					<identifier> sum </identifier>								
<symbol> + </symbol>						<symbol> + </symbol>								
<identifier> a </identifier>					<identifier> a </identifier>								
<symbol> [ </symbol>						<symbol> [ </symbol>								
<identifier> i </identifier>					<identifier> i </identifier>								
<symbol> ] </symbol>						<symbol> ] </symbol>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<keyword> let </keyword>					<keyword> let </keyword>								
<identifier> i </identifier>					<identifier> i </identifier>								
<symbol> = </symbol>						<symbol> = </symbol>								
<identifier> i </identifier>					<identifier> i </identifier>								
<symbol> + </symbol>						<symbol> + </symbol>								
<integerConstant> 1 </integerConstant>				<integerConstant> 1 </integerConstant>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<symbol> } </symbol>						<symbol> } </symbol>								
<keyword> do </keyword>						<keyword> do </keyword>								
<identifier> Output </identifier>				<identifier> Output </identifier>								
<symbol> . </symbol>						<symbol> . </symbol>								
<identifier> printString </identifier>				<identifier> printString </identifier>								
<symbol> ( </symbol>						<symbol> ( </symbol>								
<stringConstant> THE AVERAGE IS:  </stringConstant>		<stringConstant> THE AVERAGE IS:  </stringConstant>								
<symbol> ) </symbol>						<symbol> ) </symbol>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<keyword> do </keyword>						<keyword> do </keyword>								
<identifier> Output </identifier>				<identifier> Output </identifier>								
<symbol> . </symbol>						<symbol> . </symbol>								
<identifier> printInt </identifier>				<identifier> printInt </identifier>								
<symbol> ( </symbol>						<symbol> ( </symbol>								
<identifier> sum </identifier>					<identifier> sum </identifier>								
<symbol> / </symbol>						<symbol> / </symbol>								
<identifier> length </identifier>				<identifier> length </identifier>								
<symbol> ) </symbol>						<symbol> ) </symbol>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<keyword> do </keyword>						<keyword> do </keyword>								
<identifier> Output </identifier>				<identifier> Output </identifier>								
<symbol> . </symbol>						<symbol> . </symbol>								
<identifier> println </identifier>				<identifier> println </identifier>								
<symbol> ( </symbol>						<symbol> ( </symbol>								
<symbol> ) </symbol>						<symbol> ) </symbol>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<keyword> return </keyword>					<keyword> return </keyword>								
<symbol> ; </symbol>						<symbol> ; </symbol>								
<symbol> } </symbol>						<symbol> } </symbol>								
<symbol> } </symbol>						<symbol> } </symbol>								
</tokens>							</tokens>								
