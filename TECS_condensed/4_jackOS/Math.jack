//Jack math class

class Math{
	static Array mask;
	static int bitwidth;
	static boolean isNeg;
	// makes array of size 16 to be able to mask all 16 bits in hack word
	function void init(){
		var int cnt;
		var int num;
		let isNeg = false;
		let bitwidth = 16;
		let mask = Array.new(bitwidth);
		let cnt = 0;
		let num = 1;
		while( cnt < bitwidth ){
			let mask[cnt] = num;
			let num = num + num;
			let cnt = cnt + 1;
		}
		return;
	}
	
	function int abs( int x){
		if( x < 0 ){
			return -x;
		}
		return  x; 
	}
	
	function int multiply(int x, int y){
		//handleing of negative number not needed
		var int sum, shiftedX, j;
		let sum = 0;
		let shiftedX = x;
		let j = 0;
		while ( j < bitwidth){
			//if( ~(Math.getbit( y, j) = 0)){
			if( ~( (y & mask[j]) = 0)){
			let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let j = j + 1;
		}
		return sum;
	}
	function int divide ( int x, int y){
		var boolean isNeg;
		var int q;
		if( y = 0 ) { do Sys.error(3);}// handle divide by zero
		let isNeg = false;
		if( x < 0 ) {
			let isNeg = ~isNeg;
			let x = -x;
		}
		if( y < 0 ) {
			let isNeg = ~isNeg;
			let y = -y;
		}
		let q = Math.divide2( x, y);
		if ( isNeg){
			return -q;
		}else{
			return q;
		}
	}
	function int divide2( int x, int y){
		var int q, temp;
	
		if( (y > x) | (y < 0) ){ return 0; }
		let q = Math.divide2( x, y+y);
		let temp = Math.multiply( q, y);
		if( ( x - ( temp + temp )) < y){
			return q + q;
		} else {
			return q + q + 1;
		}
	}
	//expects positive numbers 
	function int mod( int a, int b){
		//let a = Math.abs(a);
		//let b = Math.abs(b);
		//if ( a < b ) { return a;}
		//if ( a = b ) { return 0;}
		return ( a - (b*(a/b)));
	}
	function int sqrt( int x){
		var int y, g;
		let y = 1;
		let g = 1;
		if( x < 0 ){ 
			do Sys.error( 4 ); 
		}
		
		while ( ~( g > x ) ){
			let y = y + 1;
			let g = Math.multiply(y, y);
			if( g < 0 ){
				return y - 1;
			}
		}
		return y - 1;
	}
	
	function int power(int b, int e){// buggy with negative numbers
		
		if( e = 0){
			return 1;
		}else{ if( e < 0){// error check for negative exponent
			return 0;
		}else{
			//return Math.multiply( b, Math.power( b, e-1));
			return b * Math.power(b, e-1);
		}}
	}
	
	function int max(int x, int y){
		if( x < y){
			return y;
		}else{
			return x;
		}
	}
	
	function int min(int x, int y){
		/*if( x < y){
			return x;
		}else{
			return y;
		}*/
		return -( Math.max( -x, -y));
	}
	//uses bit masking to check a specific bit.
	//if it returns with a  0 than there isn't a bit at that location
	function int getbit(int num, int position){
		//error check to see if position is within bounds.  error otherwise
		return num & mask[position];
	}
	function int setbit(int num, int position){
		//error check to see if the position is within bounds.  error otherwise
		return num |(mask[position]);
	}
	function int clearbit(int num, int position){
		//error check to see if in bounds.  Error otherwise
		return num & ( ~(mask[position]));
	}
	/*param: the number that will be left shifted once
	return: the shifted result*/
	//function int leftShift(int thisNumber){
	//	return thisNumber + thisNumber;
	//}
	/*param: the number that will be right shifted once
	return: the shifted result*/
	//function int rightShift( int thisNumber){
	//	var int i;
	//	//right rotate [biwidth-1] times
	//	let i = 1;
	//	while( i < 16){
	//		let thisNumber = thisNumber+ thisNumber + (-(thisNumber< 0));
	//		let i = i + 1;
	//	}
	//	// remove MSB via x7fff mask
	//	return thisNumber & 32767;
	//}
	//allows multiple leftshifts
	function int leftShiftby( int thisNumber, int thisManyTimes){
		while( thisManyTimes>0){
			let thisNumber = thisNumber + thisNumber;
			let thisManyTimes = thisManyTimes -1;
		}
		return thisNumber;
	}
	//allows multiple rightshifts
	function int rightShiftby( int thisNumber, int thisManyTimes){
		var int i, range, xdiv;
		let range = 16 - thisManyTimes;
		while ( i < range){
			let xdiv = xdiv+ xdiv;
			if( thisNumber < 0){ let xdiv = xdiv + 1; }
			let thisNumber = thisNumber + thisNumber;
			let i = i + 1;
		}
		return xdiv;
		
	}
	function int XOR( int a, int b){
		return ( a & (~b)) | ( (~a) & b);
	}
	function int GCD( int a, int b){ // assumes a >= b >= 0
		if( b =0){ return a;}
		return Math.GCD( b, Math.mod( a, b));
	}
}