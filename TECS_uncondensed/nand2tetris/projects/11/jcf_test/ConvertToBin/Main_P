<class>
  <keyword> class </keyword>
  <identifier> Main </identifier>(class#def)
  <symbol> { </symbol>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> main </identifier>(subroutine#def#Main)
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> result </identifier>(var#def#int#result_2_0)
        <symbol> , </symbol>
        <identifier> value </identifier>(var#def#int#value_2_1)
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <callFunction>(Main)
            <identifier> Main </identifier>(class#used#implicit)
            <symbol> . </symbol>
            <identifier> fillMemory </identifier>(subroutine#used#Main#function)
            <symbol> ( </symbol>
            <expressionList>
              <expression>
                <term>
                  <integerConstant> 8001 </integerConstant>
                </term>
              </expression>
              <symbol> , </symbol>
              <expression>
                <term>
                  <integerConstant> 16 </integerConstant>
                </term>
              </expression>
              <symbol> , </symbol>
              <expression>
                <term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </term>
              </expression>
            </expressionList>
            <symbol> ) </symbol>
          </callFunction>(Main.fillMemory##num_arg#3)
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> value </identifier>(var#used#int#value_2_1)
          <symbol> = </symbol>
          <expression>
            <term>
              <callFunction>(Memory)
                <identifier> Memory </identifier>(class#used#implicit)
                <symbol> . </symbol>
                <identifier> peek </identifier>(subroutine#used#Memory#function)
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <integerConstant> 8000 </integerConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </callFunction>(Memory.peek##num_arg#1)
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <callFunction>(Main)
            <identifier> Main </identifier>(class#used#implicit)
            <symbol> . </symbol>
            <identifier> convert </identifier>(subroutine#used#Main#function)
            <symbol> ( </symbol>
            <expressionList>
              <expression>
                <term>
                  <identifier> value </identifier>(var#used#int#value_2_1)
                </term>
              </expression>
            </expressionList>
            <symbol> ) </symbol>
          </callFunction>(Main.convert##num_arg#1)
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> convert </identifier>(subroutine#def#Main)
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> value </identifier>(argument#def#int#value_1_0)
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> mask </identifier>(var#def#int#mask_2_0)
        <symbol> , </symbol>
        <identifier> position </identifier>(var#def#int#position_2_1)
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier> loop </identifier>(var#def#boolean#loop_2_2)
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> loop </identifier>(var#used#boolean#loop_2_2)
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> true </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
          <whileStatement>
            <keyword> while </keyword>
            <symbol> ( </symbol>
            <expression>
              <term>
                <identifier> loop </identifier>(var#used#boolean#loop_2_2)
              </term>
            </expression>
            <symbol> ) </symbol>
            <symbol> { </symbol>
            <statements>
              <letStatement>
                <keyword> let </keyword>
                <identifier> position </identifier>(var#used#int#position_2_1)
                <symbol> = </symbol>
                <expression>
                  <term>
                    <identifier> position </identifier>(var#used#int#position_2_1)
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
              <letStatement>
                <keyword> let </keyword>
                <identifier> mask </identifier>(var#used#int#mask_2_0)
                <symbol> = </symbol>
                <expression>
                  <term>
                    <callFunction>(Main)
                      <identifier> Main </identifier>(class#used#implicit)
                      <symbol> . </symbol>
                      <identifier> nextMask </identifier>(subroutine#used#Main#function)
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> mask </identifier>(var#used#int#mask_2_0)
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                    </callFunction>(Main.nextMask##num_arg#1)
                  </term>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
              <doStatement>
                <keyword> do </keyword>
                <callFunction>(Memory)
                  <identifier> Memory </identifier>(class#used#implicit)
                  <symbol> . </symbol>
                  <identifier> poke </identifier>(subroutine#used#Memory#function)
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <integerConstant> 9000 </integerConstant>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <identifier> position </identifier>(var#used#int#position_2_1)
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <identifier> mask </identifier>(var#used#int#mask_2_0)
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </callFunction>(Memory.poke##num_arg#2)
                <symbol> ; </symbol>
              </doStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <symbol> ( </symbol>
                        <expression>
                          <term>
                            <identifier> position </identifier>(var#used#int#position_2_1)
                          </term>
                          <symbol> &gt; </symbol>
                          <term>
                            <integerConstant> 16 </integerConstant>
                          </term>
                        </expression>
                        <symbol> ) </symbol>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                      <ifStatement>
                        <keyword> if </keyword>
                        <symbol> ( </symbol>
                        <expression>
                          <term>
                            <symbol> ~ </symbol>
                            <term>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <symbol> ( </symbol>
                                  <expression>
                                    <term>
                                      <identifier> value </identifier>(argument#used#int#value_1_0)
                                    </term>
                                    <symbol> &amp; </symbol>
                                    <term>
                                      <identifier> mask </identifier>(var#used#int#mask_2_0)
                                    </term>
                                  </expression>
                                  <symbol> ) </symbol>
                                </term>
                                <symbol> = </symbol>
                                <term>
                                  <integerConstant> 0 </integerConstant>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                            </term>
                          </term>
                        </expression>
                        <symbol> ) </symbol>
                        <symbol> { </symbol>
                        <statements>
                          <doStatement>
                            <keyword> do </keyword>
                            <callFunction>(Memory)
                              <identifier> Memory </identifier>(class#used#implicit)
                              <symbol> . </symbol>
                              <identifier> poke </identifier>(subroutine#used#Memory#function)
                              <symbol> ( </symbol>
                              <expressionList>
                                <expression>
                                  <term>
                                    <integerConstant> 8000 </integerConstant>
                                  </term>
                                  <symbol> + </symbol>
                                  <term>
                                    <identifier> position </identifier>(var#used#int#position_2_1)
                                  </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                  <term>
                                    <integerConstant> 1 </integerConstant>
                                  </term>
                                </expression>
                              </expressionList>
                              <symbol> ) </symbol>
                            </callFunction>(Memory.poke##num_arg#2)
                            <symbol> ; </symbol>
                          </doStatement>
                        </statements>
                        <symbol> } </symbol>
                        <keyword> else </keyword>
                        <symbol> { </symbol>
                        <statements>
                          <doStatement>
                            <keyword> do </keyword>
                            <callFunction>(Memory)
                              <identifier> Memory </identifier>(class#used#implicit)
                              <symbol> . </symbol>
                              <identifier> poke </identifier>(subroutine#used#Memory#function)
                              <symbol> ( </symbol>
                              <expressionList>
                                <expression>
                                  <term>
                                    <integerConstant> 8000 </integerConstant>
                                  </term>
                                  <symbol> + </symbol>
                                  <term>
                                    <identifier> position </identifier>(var#used#int#position_2_1)
                                  </term>
                                </expression>
                                <symbol> , </symbol>
                                <expression>
                                  <term>
                                    <integerConstant> 0 </integerConstant>
                                  </term>
                                </expression>
                              </expressionList>
                              <symbol> ) </symbol>
                            </callFunction>(Memory.poke##num_arg#2)
                            <symbol> ; </symbol>
                          </doStatement>
                        </statements>
                        <symbol> } </symbol>
                      </ifStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> loop </identifier>(var#used#boolean#loop_2_2)
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <keyword> false </keyword>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
            </statements>
            <symbol> } </symbol>
          </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> nextMask </identifier>(subroutine#def#Main)
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> mask </identifier>(argument#def#int#mask_1_0)
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
          <ifStatement>
            <keyword> if </keyword>
            <symbol> ( </symbol>
            <expression>
              <term>
                <identifier> mask </identifier>(argument#used#int#mask_1_0)
              </term>
              <symbol> = </symbol>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
            <symbol> ) </symbol>
            <symbol> { </symbol>
            <statements>
              <returnStatement>
                <keyword> return </keyword>
                <expression>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ; </symbol>
              </returnStatement>
            </statements>
            <symbol> } </symbol>
            <keyword> else </keyword>
            <symbol> { </symbol>
            <statements>
              <returnStatement>
                <keyword> return </keyword>
                <expression>
                  <term>
                    <identifier> mask </identifier>(argument#used#int#mask_1_0)
                  </term>
                  <symbol> * </symbol>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> ; </symbol>
              </returnStatement>
            </statements>
            <symbol> } </symbol>
          </ifStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> fillMemory </identifier>(subroutine#def#Main)
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> startAddress </identifier>(argument#def#int#startAddress_1_0)
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> length </identifier>(argument#def#int#length_1_1)
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> value </identifier>(argument#def#int#value_1_2)
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
          <whileStatement>
            <keyword> while </keyword>
            <symbol> ( </symbol>
            <expression>
              <term>
                <identifier> length </identifier>(argument#used#int#length_1_1)
              </term>
              <symbol> &gt; </symbol>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
            <symbol> ) </symbol>
            <symbol> { </symbol>
            <statements>
              <doStatement>
                <keyword> do </keyword>
                <callFunction>(Memory)
                  <identifier> Memory </identifier>(class#used#implicit)
                  <symbol> . </symbol>
                  <identifier> poke </identifier>(subroutine#used#Memory#function)
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <identifier> startAddress </identifier>(argument#used#int#startAddress_1_0)
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <identifier> value </identifier>(argument#used#int#value_1_2)
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </callFunction>(Memory.poke##num_arg#2)
                <symbol> ; </symbol>
              </doStatement>
              <letStatement>
                <keyword> let </keyword>
                <identifier> length </identifier>(argument#used#int#length_1_1)
                <symbol> = </symbol>
                <expression>
                  <term>
                    <identifier> length </identifier>(argument#used#int#length_1_1)
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
              <letStatement>
                <keyword> let </keyword>
                <identifier> startAddress </identifier>(argument#used#int#startAddress_1_0)
                <symbol> = </symbol>
                <expression>
                  <term>
                    <identifier> startAddress </identifier>(argument#used#int#startAddress_1_0)
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
            </statements>
            <symbol> } </symbol>
          </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
