function Math.init 2
push constant 0
pop static 2
push constant 16
pop static 1
push static 1
call Array.new 1
pop static 0
push constant 0
pop local 0
push constant 1
pop local 1
label WHILE_EXP0
push local 0
push static 1
lt
not
if-goto WHILE_END0
push local 0
push static 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
return
goto IF_END0
label IF_FALSE0
push argument 0
return
label IF_END0
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push static 1
lt
not
if-goto WHILE_END0
push argument 1
push local 2
call Math.getbit 2
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 1
add
pop local 0
label IF_FALSE0
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.divide 2
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 3
call Sys.error 1
pop temp 0
label IF_FALSE0
push constant 0
pop local 0
push argument 0
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
not
pop local 0
push argument 0
neg
pop argument 0
label IF_FALSE1
push argument 1
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
not
pop local 0
push argument 1
neg
pop argument 1
label IF_FALSE2
push argument 0
push argument 1
call Math.divide2 2
pop local 1
push local 0
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 1
neg
return
goto IF_END3
label IF_FALSE3
push local 1
return
label IF_END3
function Math.divide2 2
push argument 1
push argument 0
gt
push argument 1
push constant 0
lt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 0
push argument 1
push argument 1
add
call Math.divide2 2
pop local 0
push local 0
push argument 1
call Math.multiply 2
pop local 1
push argument 0
push local 1
push local 1
add
sub
push argument 1
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push local 0
add
return
goto IF_END1
label IF_FALSE1
push local 0
push local 0
add
push constant 1
add
return
label IF_END1
function Math.mod 0
push argument 0
push argument 1
push argument 0
push argument 1
call Math.divide 2
call Math.multiply 2
sub
return
function Math.sqrt 2
push constant 1
pop local 0
push constant 1
pop local 1
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
call Sys.error 1
pop temp 0
label IF_FALSE0
label WHILE_EXP0
push local 1
push argument 0
gt
not
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
push local 0
push local 0
call Math.multiply 2
pop local 1
push local 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 1
sub
return
label IF_FALSE1
goto WHILE_EXP0
label WHILE_END0
push local 0
push constant 1
sub
return
function Math.power 0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
return
goto IF_END0
label IF_FALSE0
push argument 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
goto IF_END1
label IF_FALSE1
push argument 0
push argument 0
push argument 1
push constant 1
sub
call Math.power 2
call Math.multiply 2
return
label IF_END1
label IF_END0
function Math.max 0
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
return
goto IF_END0
label IF_FALSE0
push argument 0
return
label IF_END0
function Math.min 0
push argument 0
neg
push argument 1
neg
call Math.max 2
neg
return
function Math.getbit 0
push argument 0
push argument 1
push static 0
add
pop pointer 1
push that 0
and
return
function Math.setbit 0
push argument 0
push argument 1
push static 0
add
pop pointer 1
push that 0
or
return
function Math.clearbit 0
push argument 0
push argument 1
push static 0
add
pop pointer 1
push that 0
not
and
return
function Math.leftShift 0
push argument 0
push argument 0
add
return
function Math.rightShift 1
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push argument 0
push argument 0
add
push argument 0
push constant 0
lt
neg
add
pop argument 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
push constant 32767
and
return
function Math.leftShiftby 0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 0
call Math.leftShift 1
push argument 1
push constant 1
sub
call Math.leftShiftby 2
return
function Math.rightShiftby 0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 0
call Math.rightShift 1
push argument 1
push constant 1
sub
call Math.rightShiftby 2
return
function Math.XOR 0
push argument 0
push argument 1
not
and
push argument 0
not
push argument 1
and
or
return
function Math.GCD 0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 1
push argument 0
push argument 1
call Math.mod 2
call Math.GCD 2
return
