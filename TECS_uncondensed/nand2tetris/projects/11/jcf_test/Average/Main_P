<class>
  <keyword> class </keyword>
  <identifier> Main </identifier>(class#def)
  <symbol> { </symbol>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> main </identifier>(subroutine#def#Main)
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier> Array </identifier>(class#used)
        <identifier> a </identifier>(var#def#Array#a_2_0)
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> length </identifier>(var#def#int#length_2_1)
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>(var#def#int#i_2_2)
        <symbol> , </symbol>
        <identifier> sum </identifier>(var#def#int#sum_2_3)
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> length </identifier>(var#used#int#length_2_1)
          <symbol> = </symbol>
          <expression>
            <term>
              <callFunction>(Keyboard)
                <identifier> Keyboard </identifier>(class#used#implicit)
                <symbol> . </symbol>
                <identifier> readInt </identifier>(subroutine#used#Keyboard#function)
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <stringConstant> How many numbers?  </stringConstant>
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </callFunction>(Keyboard.readInt##num_arg#1)
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> a </identifier>(var#used#Array#a_2_0)
          <symbol> = </symbol>
          <expression>
            <term>
              <callFunction>(Array)
                <identifier> Array </identifier>(class#used#implicit)
                <symbol> . </symbol>
                <identifier> new </identifier>(subroutine#used#Array#function)
                <symbol> ( </symbol>
                <expressionList>
                  <expression>
                    <term>
                      <identifier> length </identifier>(var#used#int#length_2_1)
                    </term>
                  </expression>
                </expressionList>
                <symbol> ) </symbol>
              </callFunction>(Array.new##num_arg#1)
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> i </identifier>(var#used#int#i_2_2)
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
          <whileStatement>
            <keyword> while </keyword>
            <symbol> ( </symbol>
            <expression>
              <term>
                <identifier> i </identifier>(var#used#int#i_2_2)
              </term>
              <symbol> &lt; </symbol>
              <term>
                <identifier> length </identifier>(var#used#int#length_2_1)
              </term>
            </expression>
            <symbol> ) </symbol>
            <symbol> { </symbol>
            <statements>
              <letStatement>
                <keyword> let </keyword>
                <callArray>
                  <identifier> a </identifier>(var#used#Array#a_2_0)
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <identifier> i </identifier>(var#used#int#i_2_2)
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </callArray>
                <symbol> = </symbol>
                <expression>
                  <term>
                    <callFunction>(Keyboard)
                      <identifier> Keyboard </identifier>(class#used#implicit)
                      <symbol> . </symbol>
                      <identifier> readInt </identifier>(subroutine#used#Keyboard#function)
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <stringConstant> Enter the next number:  </stringConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                    </callFunction>(Keyboard.readInt##num_arg#1)
                  </term>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
              <letStatement>
                <keyword> let </keyword>
                <identifier> i </identifier>(var#used#int#i_2_2)
                <symbol> = </symbol>
                <expression>
                  <term>
                    <identifier> i </identifier>(var#used#int#i_2_2)
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
            </statements>
            <symbol> } </symbol>
          </whileStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> i </identifier>(var#used#int#i_2_2)
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sum </identifier>(var#used#int#sum_2_3)
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
          <whileStatement>
            <keyword> while </keyword>
            <symbol> ( </symbol>
            <expression>
              <term>
                <identifier> i </identifier>(var#used#int#i_2_2)
              </term>
              <symbol> &lt; </symbol>
              <term>
                <identifier> length </identifier>(var#used#int#length_2_1)
              </term>
            </expression>
            <symbol> ) </symbol>
            <symbol> { </symbol>
            <statements>
              <letStatement>
                <keyword> let </keyword>
                <identifier> sum </identifier>(var#used#int#sum_2_3)
                <symbol> = </symbol>
                <expression>
                  <term>
                    <identifier> sum </identifier>(var#used#int#sum_2_3)
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <callArray>
                      <identifier> a </identifier>(var#used#Array#a_2_0)
                      <symbol> [ </symbol>
                      <expression>
                        <term>
                          <identifier> i </identifier>(var#used#int#i_2_2)
                        </term>
                      </expression>
                      <symbol> ] </symbol>
                    </callArray>
                  </term>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
              <letStatement>
                <keyword> let </keyword>
                <identifier> i </identifier>(var#used#int#i_2_2)
                <symbol> = </symbol>
                <expression>
                  <term>
                    <identifier> i </identifier>(var#used#int#i_2_2)
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
            </statements>
            <symbol> } </symbol>
          </whileStatement>
        <doStatement>
          <keyword> do </keyword>
          <callFunction>(Output)
            <identifier> Output </identifier>(class#used#implicit)
            <symbol> . </symbol>
            <identifier> printString </identifier>(subroutine#used#Output#function)
            <symbol> ( </symbol>
            <expressionList>
              <expression>
                <term>
                  <stringConstant> The average is:  </stringConstant>
                </term>
              </expression>
            </expressionList>
            <symbol> ) </symbol>
          </callFunction>(Output.printString##num_arg#1)
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <callFunction>(Output)
            <identifier> Output </identifier>(class#used#implicit)
            <symbol> . </symbol>
            <identifier> printInt </identifier>(subroutine#used#Output#function)
            <symbol> ( </symbol>
            <expressionList>
              <expression>
                <term>
                  <identifier> sum </identifier>(var#used#int#sum_2_3)
                </term>
                <symbol> / </symbol>
                <term>
                  <identifier> length </identifier>(var#used#int#length_2_1)
                </term>
              </expression>
            </expressionList>
            <symbol> ) </symbol>
          </callFunction>(Output.printInt##num_arg#1)
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <callFunction>(Output)
            <identifier> Output </identifier>(class#used#implicit)
            <symbol> . </symbol>
            <identifier> println </identifier>(subroutine#used#Output#function)
            <symbol> ( </symbol>
            <expressionList>
            </expressionList>
            <symbol> ) </symbol>
          </callFunction>(Output.println##num_arg#0)
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
