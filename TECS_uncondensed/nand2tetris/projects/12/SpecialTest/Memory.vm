function Memory.init 0
push constant 0
return
function Memory.heapBase 0
push constant 2048
return
function Memory.heapEnd 0
push constant 16384
return
function Memory.maxBlocks 0
call Memory.heapEnd 0
call Memory.heapBase 0
sub
call Math.rightShift 1
call Math.rightShift 1
return
function Memory.blockSize 0
push constant 4
return
function Memory.numBlocksToAllocate 0
push argument 0
call Math.rightShift 1
call Math.rightShift 1
push constant 1
add
return
function Memory.BlockAddr 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
return
label IF_FALSE0
push argument 0
call Memory.maxBlocks 0
push constant 1
sub
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 20
call Sys.error 1
pop temp 0
label IF_FALSE1
call Memory.heapBase 0
push argument 0
push argument 0
add
push argument 0
add
push argument 0
add
add
return
function Memory.isFreeBlock 0
push constant 0
push argument 0
call Memory.BlockAddr 1
call Memory.peek 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push constant 0
return
function Memory.peek 0
push constant 0
push argument 0
add
pop pointer 1
push that 0
return
function Memory.poke 0
push constant 0
push argument 0
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Memory.alloc 2
push argument 0
push constant 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 23
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 0
call Memory.numBlocksToAllocate 1
pop local 0
push local 0
call Memory.findSegmentOfApproprateSize 1
pop local 1
push local 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 21
call Sys.error 1
pop temp 0
label IF_FALSE1
push local 1
push local 0
call Memory.poke 2
pop temp 0
push local 1
push constant 1
add
return
function Memory.deAlloc 3
push argument 0
push constant 1
sub
pop local 1
push local 1
call Memory.peek 1
pop local 0
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push local 0
lt
not
if-goto WHILE_END0
push local 1
push constant 0
call Memory.poke 2
pop temp 0
push local 1
call Memory.blockSize 0
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Memory.findSegmentOfApproprateSize 3
push constant 0
pop local 2
push constant 0
pop local 0
label WHILE_EXP0
push local 2
call Memory.maxBlocks 0
lt
push local 0
not
and
not
if-goto WHILE_END0
push local 2
call Memory.isFreeBlock 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push constant 1
add
pop local 1
goto IF_END0
label IF_FALSE0
push constant 0
pop local 1
push local 2
push local 2
call Memory.BlockAddr 1
call Memory.peek 1
add
push constant 1
sub
pop local 2
label IF_END0
push local 1
push argument 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
pop local 0
label IF_FALSE1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 0
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 1
neg
pop local 2
goto IF_END2
label IF_FALSE2
push local 2
push argument 0
sub
pop local 2
label IF_END2
push local 2
call Memory.BlockAddr 1
return
